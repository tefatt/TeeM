# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-05-04 22:05
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('gender', models.IntegerField(choices=[(0, 'Male'), (1, 'Female'), (2, 'Undecided')], default=0)),
                ('educations', models.IntegerField(blank=True, choices=[(0, 'High School'), (1, 'Bch'), (2, 'Msc'), (3, 'Phd'), (4, 'Other Education Level')], null=True)),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number format is e.g.: '+999999999'. Up to 15 digits allowed.", regex='^\\+?\\d{9,15}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'db_table': 'tbl_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassroomModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'tbl_classroom',
            },
        ),
        migrations.CreateModel(
            name='ExerciseModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=30)),
                ('type', models.IntegerField(choices=[(0, 'TRUE_FALSE'), (1, 'MATCHING'), (2, 'ORDERING')], default=0)),
                ('questions', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=500), size=None)),
                ('answers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), size=None)),
                ('conjunction', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), size=None)),
                ('max_score', models.PositiveSmallIntegerField()),
                ('public', models.BooleanField(default=False, help_text='Does the author want this object to be publicly accessible')),
            ],
            options={
                'db_table': 'tbl_exercise',
            },
        ),
        migrations.CreateModel(
            name='InstitutionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=20)),
                ('address', models.CharField(max_length=40)),
                ('city', models.CharField(max_length=20)),
                ('web_address', models.URLField(blank=True, null=True)),
                ('facebook', models.URLField(blank=True, null=True)),
                ('info', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tbl_institution',
            },
        ),
        migrations.CreateModel(
            name='LanguageModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=20)),
                ('flavour', models.CharField(blank=True, help_text='For defining dialect or region', max_length=20, null=True)),
                ('voice_support', models.BooleanField(default=True, help_text='Does a text to speech service like Amazon Polly exist')),
            ],
            options={
                'db_table': 'tbl_language',
            },
        ),
        migrations.CreateModel(
            name='LanguageUserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('level', models.IntegerField(choices=[(0, 'A1'), (1, 'A2'), (2, 'B1'), (3, 'B2'), (4, 'C1'), (5, 'C2')])),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.LanguageModel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tbl_language_user',
            },
        ),
        migrations.CreateModel(
            name='TeacherModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('institution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.InstitutionModel')),
                ('teaching_language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.LanguageModel')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tbl_teacher',
            },
        ),
        migrations.CreateModel(
            name='TestSheetModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=20)),
                ('difficulty', models.IntegerField(choices=[(0, 'Very Easy'), (1, 'Easy'), (2, 'Medium'), (3, 'Difficult'), (4, 'Very Difficult')], default=2)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ClassroomModel')),
            ],
            options={
                'db_table': 'tbl_test_sheet',
            },
        ),
        migrations.CreateModel(
            name='TutorialModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=30)),
                ('content', models.TextField()),
                ('public', models.BooleanField(default=False, help_text='Does the author want this object to be publicly accessible')),
                ('test_sheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.TestSheetModel')),
            ],
            options={
                'db_table': 'tbl_tutorial',
            },
        ),
        migrations.CreateModel(
            name='UnitModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('score', models.PositiveIntegerField(default=0)),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ClassroomModel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tbl_unit',
            },
        ),
        migrations.AddField(
            model_name='exercisemodel',
            name='test_sheet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.TestSheetModel'),
        ),
        migrations.AddField(
            model_name='classroommodel',
            name='medium_language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.LanguageModel'),
        ),
        migrations.AddField(
            model_name='classroommodel',
            name='teacher',
            field=models.ForeignKey(help_text='If null, tandem model is applied', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.TeacherModel'),
        ),
        migrations.AddField(
            model_name='classroommodel',
            name='user',
            field=models.ManyToManyField(related_name='classroom', through='api.UnitModel', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='native_language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.LanguageModel'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='other_languages',
            field=models.ManyToManyField(related_name='user_lang', through='api.LanguageUserModel', to='api.LanguageModel'),
        ),
        migrations.AddField(
            model_name='usermodel',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
